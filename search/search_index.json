{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Only Devs","text":"<p>Posts about programming, mainly games and Unreal Engine</p>"},{"location":"Extra%20Notes/Notes%20do%20not%20require%20meta-data/","title":"Notes do not require meta data","text":"<p>This is a test note that does not require meta-data</p>"},{"location":"blog/","title":"Blog","text":""},{"location":"blog/2024/07/25/ctrlg-to-goto-symbol-in-graph/","title":"CTRL+G to Goto Symbol in Graph","text":"<p>Similar to Resharper/Rider find function in file. Press <code>CLTR+G</code> to open the GO TO SYMBOL window.</p> <p></p>","tags":["unreal","blueprints"]},{"location":"blog/2025/05/13/debugging-gengine-and-geditor/","title":"Debugging GEngine and GEditor","text":"<p>Debugging global variables is different than debugging regular variables in Visual Studio on Windows. </p> <p>Every static variable is defined in its own <code>dll</code> module. Visual Studio requires the variable to be qualified by the module: <pre><code>{,,UnrealEditor-Engine}::GEngine\n{,,UnrealEditor-Core}::GFrameNumber\n{,,UnrealEditor-UnrealEd}::GEditor\n</code></pre></p>","tags":["unreal","debug","visual-studio"]},{"location":"blog/2025/10/31/drawdebugstring-per-actor-limit/","title":"DrawDebugString Per-Actor Limit","text":"<p>Quick Tip: DrawDebugString has a maximum number of strings that can be displayed per actor. By default, this limit is 128 strings.</p> <p>If you're hitting this limit and your debug text is getting cut off, you can adjust it using the console command:</p> <pre><code>r.DebugSafeZone.MaxDebugTextStringsPerActor\n</code></pre> <p>Set it to your desired limit, or use <code>0</code> for unlimited strings (though be warned\u2014this will tank your FPS very quickly if you're displaying a large number of strings).</p>","tags":["unreal","debug"]},{"location":"blog/2025/05/09/enum-flags-bitmask/","title":"Enum Flags (Bitmask)","text":"<pre><code>UENUM(BlueprintType, meta = (Bitflags, UseEnumValuesAsMaskValuesInEditor = \"true\"))\nenum class EPs_FireModes : uint8\n{\n    None   = 0,\n    Single = 1 &lt;&lt; 0,\n    Burst  = 1 &lt;&lt; 1,\n    Auto   = 1 &lt;&lt; 2\n};\n</code></pre> <p>\u26a0<code>UseEnumValuesAsMaskValuesInEditor</code> is necessary Moreover, <code>None = 0</code> as the first enum is also required. Note that without <code>UseEnumValuesAsMaskValuesInEditor</code> the enum flags will NOT behave correctyl</p>","tags":["unreal","enum"]},{"location":"blog/2025/10/17/fscopedmovementupdate/","title":"FScopedMovementUpdate","text":"<p>A scope-based RAII helper that batches USceneComponent transform updates to avoid redundant expensive operations, and can automatically revert failed moves.</p> <p>Problem it solves: When modifying a component's transform multiple times in quick succession (e.g., setting location then rotation), each modification triggers expensive operations: - UpdateBounds() - MarkRenderTransformDirty() - Overlap queries - Physics updates - Child component updates</p> <p>How it works: Wraps transform modifications in a scope. All changes are deferred until the destructor runs, performing expensive operations only once with the final transform state.</p> <p>Usage: <pre><code>{\n    FScopedMovementUpdate ScopedUpdate(Component, EScopedUpdate::DeferredUpdates);\n    Component-&gt;SetWorldLocation(NewLocation);\n    Component-&gt;SetWorldRotation(NewRotation);\n    Component-&gt;SetWorldScale3D(NewScale);\n    // Expensive operations happen here when ScopedUpdate destructs\n}\n</code></pre></p> <p>Automatic Move Reversion: Can detect blocked/invalid moves and automatically restore the original transform: <pre><code>FScopedMovementUpdate ScopedUpdate(Component, EScopedUpdate::DeferredUpdates);\nComponent-&gt;SetWorldLocation(AttemptedLocation);\n\nif (MoveWasBlocked())\n{\n    ScopedUpdate.RevertMove(); // Restores original transform\n}\n// Or let destructor handle it based on internal state\n</code></pre></p> <p>Best used when: - Applying multiple transform changes in one frame - Processing batched movement requests - Updating transform components (location, rotation, scale) together - Modifying hierarchies of components - Tentative moves that may need to be reverted (collision resolution, validation)</p> <p>Modes: - <code>DeferredUpdates</code>: Defers all updates until scope exit (most common) - <code>ImmediateUpdates</code>: Applies updates immediately (rarely needed)</p>","tags":["unreal","transform","batch","movement"]},{"location":"blog/2025/03/25/hiding-blueprint-functions-from-editor/","title":"Hiding Blueprint Functions From Editor","text":"<p>Quick Tip: Using a simple INI configuration, you can selectively hide specific blueprint functions from appearing in the editor interface, keeping your blueprint context menus cleaner and more focused on the functions that matter for your project.</p> <pre><code>[BlueprintEditor.Menu]\n+BlueprintHiddenFields=\"/Script/Engine.Actor:K2_AttachRootComponentTo\"\n+BlueprintHiddenFields=\"/Script/Engine.Actor:K2_AttachRootComponentToActor\"\n+BlueprintHiddenFields=\"/Script/Engine.Actor:DetachRootComponentFromParent\"\n+BlueprintHiddenFields=\"/Script/Engine.SceneComponent:K2_AttachTo\"\n+BlueprintHiddenFields=\"/Script/Engine.SceneComponent:DetachFromParent\"\n</code></pre>","tags":["unreal","editor","blueprint"]},{"location":"blog/2025/04/02/how-to-get-fhitresultfaceindex/","title":"How to get FHitResult.FaceIndex","text":"<p>Quick Tip: In order for <code>FHitResult.FaceIndex</code> to return a valid index, multiple settings have to be enabled:</p> <ol> <li>The trace being performed needs to trace complex (<code>bTraceComplex=true</code>)</li> <li>The trace being performed needs to return the face index (<code>bReturnFaceIndex=true</code>)</li> <li>Any mesh from traced against must have its collision complexity set to either Use Complex Collision as Simple or Use Both Simple and Complex. If the mesh only has a simple collision setup, the engine won't have triangle data to return.</li> </ol>","tags":["unreal","hitresult","trace"]},{"location":"blog/2023/10/16/math-nodes/","title":"Math Nodes","text":"<p>Easily forgotten feature of Blueprints. Math nodes can make Blueprints much more readable.</p> <p></p> <p>Math Expression Node | Unreal Engine 4.27 Documentation | Epic Developer Community</p>","tags":["unreal","blueprints"]},{"location":"blog/2024/10/05/preview-vfx-quickly-in-level/","title":"Preview VFX Quickly in Level","text":"<p>Drag VFX into the Level and Press\u00a0<code>/</code>\u00a0to restart the VFX</p> <p></p>","tags":["unreal","vfx","niagara"]},{"location":"blog/2023/10/16/rounding-numbers/","title":"Rounding Numbers","text":"<p>The node can round numbers with minimum/maximum whole/integral and fractional/decimal digits</p> <p></p>","tags":["unreal","blueprints","math"]},{"location":"blog/2025/03/25/seamless-travel/","title":"Seamless Travel","text":"<p>Quick Tip: Testing seamless level transitions in PIE became possible starting with Unreal Engine 5.1! To get this working, you'll need to:</p> <ol> <li>Configure your <code>GameMode</code> to use seamless travel</li> <li>Add this to your <code>DefaultEngine.ini</code> <pre><code>[SystemSettings]  \nnet.AllowPIESeamlessTravel=1\n</code></pre></li> <li>Set up a transition level in your project settings</li> </ol>","tags":["unreal","multiplayer"]},{"location":"blog/2025/03/25/using-execcmds-to-set-console-variables-at-launch/","title":"Using ExecCmds to Set Console Variables at Launch","text":"<p>Quick Tip: Use <code>-ExecCmds</code> in your launch parameters to set multiple console variables (<code>CVars</code>) during startup.</p> <ul> <li>Add console commands to your launch parameters with this syntax: <pre><code>-ExecCmds=\"cvar1 value1, cvar2 value2, cvar3 value3\"\n</code></pre></li> <li>Commands execute immediately after <code>GameInstance</code> initialization</li> <li>Useful for testing specific configurations without changing code</li> <li>Multiple commands can be chained with commas as separators</li> </ul>","tags":["unreal","cvar","launch","command"]},{"location":"blog/archive/2025/","title":"2025","text":""},{"location":"blog/archive/2024/","title":"2024","text":""},{"location":"blog/archive/2023/","title":"2023","text":""},{"location":"blog/page/2/","title":"Blog","text":""}]}